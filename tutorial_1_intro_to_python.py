# -*- coding: utf-8 -*-
"""Tutorial 1 - Intro to Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12BcOhLiXhtdJkOGc2-_BPB1Qxzz_pc3q

# **Introduction**
In this tutorial, we will introduce you to three essential Python modules: NumPy, Pandas, and Matplotlib. Just like MATLAB has its core functions, data handling capabilities, and plotting tools, Python relies on these modules to provide similar functionality.

**1. NumPy - Numerical Calculations:**

NumPy, short for Numerical Python, serves as the foundation for numerical and array operations in Python, much like MATLAB's core functions. It enables you to work with arrays and matrices efficiently, making it an indispensable tool for scientific computing and data manipulation.

**2. Pandas - Data Handling and Manipulation:**

Pandas is Python's answer to MATLAB's data manipulation capabilities. With Pandas DataFrames, you can easily load, clean, transform, and analyze data tables, just as you would with MATLAB's data structures. It simplifies the process of working with structured data, making it an ideal choice for data preprocessing and exploration.

**3. Matplotlib - Data Visualization:**

Matplotlib is the go-to library for creating visualizations in Python, similar to MATLAB's plotting functionality. Whether you need to create simple line charts or complex heatmaps, Matplotlib provides the tools to visualize your data effectively.

If you don't have a certain module installed already, you can use the pip package manager with the install command shown below.
"""

pip install "library"  # library can be either pandas, numpy, matplotlib

"""If you do want to use Google Colab rather than a local IDE on your computer like Spyder. Use this tutorial to save your files to a Github repository.

https://bebi103a.github.io/lessons/02/git_with_colab.html

# **NumPy**
First lets do a quick Numpy example on arrays

In MATLAB, to create a 2x3 matrix we would use the following notation
"""

# % Creating a 2x3 matrix
# A = [1, 2, 3; 4, 5, 6];

# % Accessing elem        ents
# element = A(2, 3);  % Accessing the element at row 2, column 3

"""In Python we would do the following."""

import numpy as np # We can use np rather than type numpy each time

# Creating a 2x3 NumPy array
A = np.array([[1, 2, 3], [4, 5, 6]])

# Accessing elements
element = A[1, 2]  # Accessing the element at row 1, column 2
print(element) # Python does not automatically print to console

"""Lets say we wanted to loop through an array in MATLAB"""

# % Create a MATLAB array
# arr = [1, 2, 3, 4, 5];

# % Loop through the array using a for loop
# for i = 1:1:length(arr)
#     element = arr(i);
#     disp(element);
# end

"""In Python we can use Numpy to do this."""

import numpy as np

# Create a NumPy array
arr = np.array([1, 2, 3, 4, 5])

# Loop through the array using a for loop
for elements in arr: # The word element here is a placeholder for "items in the array" It can be anything.
    print(element)

"""The method of looping works for this as we are printing out each element. But if we wanted to skip an index, then we'd have to do it in a method similar to MATLAB."""

import numpy as np

# Create a NumPy array
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Loop through the array and skip every other element
for i in range(0, len(arr), 2):
    element = arr[i]
    print(element)

"""Basic actions such as sum, mean, min and max can be done using Numpy as well."""

import numpy as np

arr = np.array([1, 2, 3, 4, 5])
total = np.sum(arr)
average = np.mean(arr)
max_value = np.max(arr)
min_value = np.min(arr)

print("Sum:", total, "items") # Printing text in Python is really simple when including text and variables, no need to do %d
print("Mean:", average)
print("Max:", max_value)
print("Min:", min_value)

"""One action you might have to deal with when doing ML tasks is reshaping arrays. This is very easy with Numpy as seen in this code."""

import numpy as np

# Create a NumPy array
arr = np.array([[1, 2, 3], [4, 5, 6]])

# Print the current shape of the array
print("Original Shape:", arr.shape)

# Reshape the array into a 2x3 matrix
reshaped_arr = arr.reshape(1, 6)

# Print the reshaped array
print("Reshaped Array:")
print(reshaped_arr)

# Print the new shape of the reshaped array
print("New Shape:", reshaped_arr.shape)

"""# **Pandas**

Pandas is a very powerful tool when it comes to ML tasks, as it gives u access to dealing with data in CSV files. Most datasets come in csv files so this is essential to working with large datasets. It provides data structures like DataFrames and Series, which are akin to tables and arrays, making it easy to work with structured data. With Pandas, you can load, clean, transform, and analyze data.

Panda's uses DataFrames, which can be considered the Panda version of a spreadsheet. It has rows and columns which allows you to modify csv data.
"""

import pandas as pd

# Creating a DataFrame from a dictionary
data = {'Name': ['Alice', 'Bob', 'Charlie'],
        'Age': [25, 30, 35]}
df = pd.DataFrame(data)

# View the first few rows
print(df.head())

# Get information about the DataFrame
print(df.info())

"""If you want to import data from a CSV file to work on it you can use a method like this."""

import pandas as pd

# URL to the CSV file on the UCI Machine Learning Repository
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"

# Column names for the Iris dataset (you can adjust them as needed)
column_names = ["sepal_length", "sepal_width", "petal_length", "petal_width", "class"]

# Read the CSV file into a DataFrame
df = pd.read_csv(url, names=column_names)

# Display the first few rows of the DataFrame
print(df.head())

import pandas as pd

# URL to the CSV file on the UCI Machine Learning Repository
url = "https://drive.google.com/uc?id=1zO8ekHWx9U7mrbx_0Hoxxu6od7uxJqWw&export=download"


# Read the CSV file into a DataFrame
df = pd.read_csv(url)

# Display the first few rows of the DataFrame
print(df.head())

"""Modifying data can be done using simple opperators."""

Country = df["Country"]
print(Country)

roy = df[df["First Name"] == "Roy"]
print(roy)

"""Writing to a csv file is also simple as you need one line."""

df.to_csv('new_csv.csv', index=False) # Index false just removes the additional index column that is used in Pandas

"""# **Matplotlib**

Matplotlib is a widely-used Python library for creating high-quality, customizable plots and visualizations. It provides a flexible and intuitive interface for generating a wide range of charts, graphs, and figures, making it an essential tool for data visualization and scientific plotting in Python.

For example a line plot.

"""

import matplotlib.pyplot as plt

# Sample data
x = [1, 2, 3, 4, 5]
y = [2, 4, 6, 8, 10]

# Create a line plot
plt.plot(x, y)

# Add labels and a title
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Simple Line Plot')

# Show the plot
plt.show()

"""Scatter plot."""

import matplotlib.pyplot as plt

# Sample data
x = [1, 2, 3, 4, 5]
y = [2, 4, 6, 8, 10]

# Create a scatter plot
plt.scatter(x, y)

# Add labels and a title
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Scatter Plot')

# Show the plot
plt.show()

"""Pie Chart"""

import matplotlib.pyplot as plt

# Sample data
labels = ['Category A', 'Category B', 'Category C', 'Category D']
sizes = [25, 30, 15, 30]

# Create a pie chart
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=0) # The autopct argument states how you want the values to be shown in the plot

# Add a title
plt.title('Pie Chart')

# Show the plot
plt.axis('equal')  # Equal aspect ratio ensures a circular pie chart
plt.show()

"""# **Combined Examples**
Some examples using pandas, numpy and matplotlib
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Generate random data for altitude of fighter jets and passenger planes
np.random.seed(0)
fighter_jet_altitude = np.random.randint(30000, 60000, 20)  # Altitude in feet
passenger_plane_altitude = np.random.randint(30000, 60000, 20)  # Altitude in feet

# Create a DataFrame to store the data
data = pd.DataFrame({
    'Fighter Jet Altitude': fighter_jet_altitude,
    'Passenger Plane Altitude': passenger_plane_altitude
})

# Data analysis: Calculate summary statistics
summary_stats = data.describe()

# Data visualization: Create a box plot to compare altitudes
plt.figure(figsize=(8, 6))
data.boxplot(column=['Fighter Jet Altitude', 'Passenger Plane Altitude'])
plt.title('Altitude Comparison: Fighter Jets vs. Passenger Planes')
plt.ylabel('Altitude (feet)')
plt.xticks([1, 2], ['Fighter Jets', 'Passenger Planes'])
plt.grid(axis='y')
plt.show()

print("Welcome to the Altitude Analysis Tool!")
print("Analyzing altitude data for Fighter Jets and Passenger Planes.")
print("\nSummary Statistics:")
print(summary_stats)

#input("Press Enter to continue and view the box plot...")

# Display the box plot

"""Another example."""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Generate random data for speed and altitude of fighter jets and passenger planes
np.random.seed(0)
num_samples = 30

fighter_jet_speed = np.random.randint(800, 2000, num_samples)  # Speed in mph
fighter_jet_altitude = np.random.randint(30000, 60000, num_samples)  # Altitude in feet

passenger_plane_speed = np.random.randint(400, 800, num_samples)  # Speed in mph
passenger_plane_altitude = np.random.randint(20000, 40000, num_samples)  # Altitude in feet

# Create DataFrames to store the data
fighter_jet_data = pd.DataFrame({
    'Speed (mph)': fighter_jet_speed,
    'Altitude (feet)': fighter_jet_altitude,
    'Aircraft Type': 'Fighter Jet'
})

passenger_plane_data = pd.DataFrame({
    'Speed (mph)': passenger_plane_speed,
    'Altitude (feet)': passenger_plane_altitude,
    'Aircraft Type': 'Passenger Plane'
})

# Combine the data for both aircraft types into one DataFrame
data = pd.concat([fighter_jet_data, passenger_plane_data], ignore_index=True)

# Data analysis: Calculate summary statistics
summary_stats = data.groupby('Aircraft Type').describe()

# Data visualization: Create scatter plots
plt.figure(figsize=(10, 6))
plt.scatter(data['Speed (mph)'], data['Altitude (feet)'], c=data['Aircraft Type'].map({'Fighter Jet': 'red', 'Passenger Plane': 'blue'}))
plt.title('Aircraft Speed vs. Altitude')
plt.xlabel('Speed (mph)')
plt.ylabel('Altitude (feet)')
plt.legend(['Fighter Jet', 'Passenger Plane'])
plt.grid()
plt.show()

# Interactive part: Let students analyze the summary statistics and scatter plot
print("Welcome to the Aircraft Analysis Tool!")
print("Analyzing speed and altitude data for Fighter Jets and Passenger Planes.")
print("\nSummary Statistics:")
print(summary_stats)

"""# **Object Oriented Programming**

and how it differs from procedural programming.

Object-Oriented Programming (OOP), as seen in Python, structures code around "objects" that bundle both data and functions that work with that data. Think of it like organizing tools in a toolbox, where each tool (object) has its own unique capabilities and properties.

Procedural Programming, as in MATLAB, is like following a step-by-step recipe. It focuses on a linear flow of commands without grouping them into objects. While this can be simpler for small tasks, it can become challenging to manage as projects grow, leading to potentially messy and less organized code. For example lets try to make a banking app. In MATLAB we would need 3 files for functions like Deposit, Withdraw and Check Balance along with another file with our actual script.
"""

# # Function 1 - Deposit  # #
# function deposit(amount)
#     global account_balance
#     account_balance = account_balance + amount;
# end


# # Function 2 - Withdraw  # #
# function withdraw(amount)
#     global account_balance
#     if amount <= account_balance
#         account_balance = account_balance - amount;
#     else
#         disp('Insufficient funds.');
#     end
# end



# # Function 3 - Check Balance  # #
# function check_balance()
#     global account_balance
#     fprintf('Account balance: $%.2f\n', account_balance);
# end



# # Interactable Script  # #

# global account_balance
# account_balance = 1000;

# fprintf('Welcome to the Bank!\n');
# while true
#     fprintf('\nChoose an option:\n');
#     fprintf('1. Deposit\n');
#     fprintf('2. Withdraw\n');
#     fprintf('3. Check Balance\n');
#     fprintf('4. Exit\n');
#     choice = input('Enter your choice: ', 's');

#     if choice == '1'
#         amount = input('Enter the deposit amount: $');
#         deposit(amount);
#     elseif choice == '2'
#         amount = input('Enter the withdrawal amount: $');
#         withdraw(amount);
#     elseif choice == '3'
#         check_balance();
#     elseif choice == '4'
#         fprintf('Thank you for banking with us!\n');
#         break;
#     else
#         fprintf('Invalid choice. Please try again.\n');
#     end
# end

"""In Python we can make a class for a bank account, and attach functions within the class to make our lives easier in the long run."""

# Python (Object-Oriented Programming)

# Define a class for a bank account
class BankAccount:
    def __init__(self, initial_balance):
        self.balance = initial_balance

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount <= self.balance:
            self.balance -= amount
        else:
            print("Insufficient funds.")

    def check_balance(self):
        print(f"Account balance: ${self.balance:.2f}")

# Create a bank account object with an initial balance
account = BankAccount(1000)

# Perform banking operations
print("Welcome to the Bank!")
while True:
    print("\nChoose an option:")
    print("1. Deposit")
    print("2. Withdraw")
    print("3. Check Balance")
    print("4. Exit")
    choice = input("Enter your choice: ")

    if choice == '1':
        amount = float(input("Enter the deposit amount: $"))
        account.deposit(amount)
    elif choice == '2':
        amount = float(input("Enter the withdrawal amount: $"))
        account.withdraw(amount)
    elif choice == '3':
        account.check_balance()
    elif choice == '4':
        print("Thank you for banking with us!")
        break
    else:
        print("Invalid choice. Please try again.")

"""Heres another comparison between the procedural code method versus the object oriented method of writing code"""

# Python (Procedural Programming)

# Define vehicle data
car = {
    'type': 'Car',
    'brand': 'Toyota',
    'model': 'Camry',
    'year': 2022,
    'fuel_type': 'Gasoline',
    'fuel_efficiency': 30.5  # miles per gallon
}

motorcycle = {
    'type': 'Motorcycle',
    'brand': 'Honda',
    'model': 'CBR500R',
    'year': 2021,
    'fuel_type': 'Gasoline',
    'fuel_efficiency': 60.2  # miles per gallon
}

# Function to calculate and print fuel cost for a trip
def calculate_fuel_cost(vehicle, distance):
    fuel_efficiency = vehicle['fuel_efficiency']
    fuel_cost = (distance / fuel_efficiency) * 3.0  # Assuming fuel price is $3.00 per gallon
    print(f"Fuel cost for the {vehicle['brand']} {vehicle['model']} for a {distance} mile trip: ${fuel_cost:.2f}")

# Calculate and print fuel cost for a trip for a car
calculate_fuel_cost(car, 100)

# Calculate and print fuel cost for a trip for a motorcycle
calculate_fuel_cost(motorcycle, 100)

"""The object oriented method would be:"""

# Python (Object-Oriented Programming)

# Define a class for vehicles
class Vehicle:
    def __init__(self, vehicle_type, brand, model, year, fuel_type, fuel_efficiency):
        self.vehicle_type = vehicle_type
        self.brand = brand
        self.model = model
        self.year = year
        self.fuel_type = fuel_type
        self.fuel_efficiency = fuel_efficiency

    def calculate_fuel_cost(self, distance):
        fuel_cost = (distance / self.fuel_efficiency) * 3.0  # Assuming fuel price is $3.00 per gallon
        print(f"Fuel cost for the {self.brand} {self.model} for a {distance} mile trip: ${fuel_cost:.2f}")

# Create vehicle objects
car = Vehicle('Car', 'Toyota', 'Camry', 2022, 'Gasoline', 30.5)
motorcycle = Vehicle('Motorcycle', 'Honda', 'CBR500R', 2021, 'Gasoline', 60.2)

# Calculate and print fuel cost for a trip for a car
car.calculate_fuel_cost(100)

# Calculate and print fuel cost for a trip for a motorcycle
motorcycle.calculate_fuel_cost(100)